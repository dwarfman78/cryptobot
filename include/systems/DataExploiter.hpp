//
// Created by dwarf on 17/07/2021.
//

#ifndef CRYPTOBOT_DATAEXPLOITER_HPP
#define CRYPTOBOT_DATAEXPLOITER_HPP
#include "ScriptedSystem.hpp"
#include "../Common.hpp"
#include "../Utils.hpp"
#include "../components/Data.hpp"
#include "../components/GuiEvent.hpp"
class DataExploiter : public ScriptedSystem<DataExploiter>, public entityx::Receiver<DataExploiter>
{
public:
    void configure(entityx::EntityManager &es, entityx::EventManager &events);
    void receive(const FilterByKeywordClickedEvent& guiEvent);
    void receive(const FilterByRegexpEnteredEvent& guiEvent);
    void receive(const CalculateLinearRegressionEvent& guiEvent);
    void receive(const CalculateMinMaxEvent& guiEvent);
protected:
    bool shouldRun(entityx::EntityManager& es, entityx::EventManager& events, entityx::TimeDelta dt);
private:
    void parseData(Data& pData) const;
    void movingAverage(Data& pData, const std::string& symbol, unsigned int movingAverageSize) const;
    std::pair<double,double> linearRegression(const std::string& symbol, std::vector<double>& xVector, std::vector<double>& yVector) const;
    template <typename TF>
    std::pair<double,double> support(const std::vector<std::pair<double,double>>& pData, TF&& func) const;
    double moyenne(const std::vector<double>& value) const;
    bool parseKeywords(const std::string& keyWordJson, Json::Value& keyWordJsonValue) const;
    void calculateHiLows(Data& pData, const std::string& symbol) const;
    void detectTrendingChanges(Data& pData, const std::string& symbol) const;

    unsigned int mIteration = 0;
    std::thread mThread;

    void parseBinanceData(Data &pData) const;
    void parseGeckoData(Data& pData) const;

    bool mFilterByKeyWord{false};
    std::string mFilterByRegexp;

    bool mCalculateLinearRegression{false};
    bool mCalculateMinMax{false};
};
#endif //CRYPTOBOT_DATAEXPLOITER_HPP
